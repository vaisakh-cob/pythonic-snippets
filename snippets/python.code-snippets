{
	"pyif": {
		"prefix": "pyif",
		"body": [
			"${1:arg1}: ${2|str,int,bool,dict,list,tuple|} = ${3:None}",
			"${4:arg2}: $2 = $3",
			"\r",
			"if $1 == $2:",
			"\tprint(\"Equal\")",
			"elif $1 >= $2:",
			"\tprint(f\"{$1} greater than {$4}\")",
			"else:",
			"\tprint(f\"{$4} greater than {$1}\")",
			"",
		],
		"description": "Python If Statement"
	},
	"pyfor": {
		"prefix": "pyfor",
		"body": [
			"items = [\"RED\", \"GREEN\", \"BLUE\"]",
			"",
			"for ${1:item} in ${2:items}:",
			"\tprint($1)",
			"",
		],
		"description": "For loop in python"
	},
	"pywhile": {
		"prefix": "pywhile",
		"body": [
			"${1:i} = ${2:0}",
			"",
			"while $1 in range(${3:5}):",
			"\tprint($1)",
			"\t$1 += ${4:1}",
			""
		],
		"description": "While loop in python"
	},
	"pytry": {
		"prefix": "pytry",
		"body": [
			"${1:TEST_VALUE} = ${2:None}",
			"",
			"try:",
			"\tprint(\"Inside Try Block\")",
			"\tif $1 is None:",
			"\t\traise ValueError(\"$1 cannot be None\")",
			"except ValueError as ${3:ex}:",
			"\tprint(\"Inside Catch Block\")",
			"\tprint($3)",
			"finally:",
			"\tprint(\"Inside Finally Block\")",
			"",
		],
		"description": "Python Try Catch Block"
	},
	"pyfunc": {
		"prefix": "pyfunc",
		"body": [
			"def function_name(${1:arg}: ${2|str,int,bool,dict,list,tuple|} = None) -> ${3|True,False|}:",
			"\t$BLOCK_COMMENT_START",
			"\tFunction Description here",
			"",
			"\tParameters",
			"\t----------",
			"\t$1 ($2) : Parameter Description",
			"",
			"\tReturns",
			"\t-------",
			"\t$3 : Return Item Description",
			"",
			"\tRaises",
			"\t------",
			"\tValueError",
			"\t\tIf the value of $1 is None",
			"",
			"\t$BLOCK_COMMENT_END",
			"\tif $1 is None:",
			"\t\traise ValueError(\"$1 cannot be None\")",
			"",
			"\tprint($1)",
			"\treturn $3",
			""			
		],
		"description": "Python function with one arguments"
	},
	"pylambda": {
		"prefix": "pylambda",
		"body": [
			"my_lambda_expression = lambda ${1:arg}: $1 + 1",
			""
		],
		"description": "Lambda Function in python"
	},	
	"pyclambda": {
		"prefix": "pyclambda",
		"body": [
			"my_lambda_expression = lambda ${1:arg}: bool(${2:lambda_helper_function}($1))",
			"",
			"def $2($1: ${3|str,int,bool,dict,list,tuple|} = None) -> ${4|True,False|}:",
			"\t$BLOCK_COMMENT_START",
			"\tFunction Description here",
			"",
			"\tParameters",
			"\t----------",
			"\t$1 ($3) : Parameter Description",
			"",
			"\tReturns",
			"\t-------",
			"\t$4 : Return Item Description",
			"",
			"\tRaises",
			"\t------",
			"\tValueError",
			"\t\tIf the value of $1 is None",
			"",
			"\t$BLOCK_COMMENT_END",
			"\tif $1 is None:",
			"\t\traise ValueError(\"$1 cannot be None\")",
			"",
			"\tprint($1)",
			"\treturn True",
			""
		],
		"description": "Complex Lambda Function in python"
	},
	"pyenv": {
		"prefix": "pyenv",
		"body": [
			"$BLOCK_COMMENT_START",
			"This is a config module which gets the environment variables",
			"$BLOCK_COMMENT_END",
			"import os",
			"",
			"${1/(.*)/${1:/downcase}/} = os.getenv(\"${1/(.*)/${1:/upcase}/}\", None)",
			"",
		],
		"description": "Using Environment Variables in Python"
	},
	"pyenvar": {
		"prefix": "pyenvar",
		"body": [
			"${1/(.*)/${1:/downcase}/} = os.getenv(\"${1/(.*)/${1:/upcase}/}\", None)",
		],
		"description": "Using Environment Variables in Python"
	},
	"pyclass": {
		"prefix": "pyclass",
		"body": [
			"$BLOCK_COMMENT_START",
			"This module description would be similar to the class description",
			"$BLOCK_COMMENT_END",
			"",
			"class ${1:MyClass}:",
			"\t$BLOCK_COMMENT_START",
			"\tClass Description",
			"\t$BLOCK_COMMENT_END",
			"\t${2:data_member_1}: ${3|str,int,bool,dict,list,tuple|}",
			"\t${4:data_member_2}: ${5|str,int,bool,dict,list,tuple|}",
			"",
			"\tdef __init__(self, $2: $3 = None, $4: $5 = None) -> None:",
			"\t\t$BLOCK_COMMENT_START",
			"\t\tClass Initialization Function. Gets called when the object is created",
			"",
			"\t\tParameters",
			"\t\t----------",
			"\t\t$2 ($3) : Parameter Description",
			"\t\t$4 ($5) : Parameter Description",
			"",
			"\t\tRaises",
			"\t\t------",
			"\t\tValueError",
			"\t\t\tIf the value of $2 is None",
			"",
			"\t\t$BLOCK_COMMENT_END",
			"\t\tif self.$2 is None and self.$4 is None:",
			"\t\t\traise ValueError(\"$2 and $4 cannot be None\")",
			"",
			"\t\tself.$2 = $2",
			"\t\tself.$4 = $4",
			"",
			"\tdef __dict__(self) -> dict:",
			"\t\t$BLOCK_COMMENT_START",
			"\t\tDictionary format of the class",
			"",
			"\t\tReturns",
			"\t\t-------",
			"\t\tdict : The object in its JSON format",
			"",
			"\t\t$BLOCK_COMMENT_END",
			"\t\treturn {",
			"\t\t\t\"$2\": self.$2,",
			"\t\t\t\"$4\": self.$4",
			"\t\t}",
			"",
			"\tdef __eq__(self, ${6:another_object}: $1) -> bool:",
			"\t\t$BLOCK_COMMENT_START",
			"\t\tChecking equality between two objects of MyClass",
			"",
			"\t\tParameters",
			"\t\t----------",
			"\t\t$6 ($1) : Parameter Description",
			"",
			"\t\tReturns",
			"\t\t-------",
			"\t\tbool : Whether the compared objects are same",
			"",
			"\t\t$BLOCK_COMMENT_END",
			"\t\tare_objects_equal = True",
			"\t\tmy_dict = dict(self)",
			"\t\t$6_dict = dict($6)",
			"",
			"\t\tfor key in my_dict:",
			"\t\t\tif my_dict[key] != $6_dict[key]:",
			"\t\t\t\tare_objects_equal = False",
			"\t\t\t\tbreak",
			"",
			"\t\treturn are_objects_equal",
			"",
		],
		"description": "Using Classes in Python"
	},
	"pyclfunc": {
		"prefix": "pyclfunc",
		"body": [
			"def function_name(self, ${1:arg}: ${2|str,int,bool,dict,list,tuple|} = None) -> ${3|True,False|}:",
			"\t$BLOCK_COMMENT_START",
			"\tFunction Description here",
			"",
			"\tParameters",
			"\t----------",
			"\t$1 ($2) : Parameter Description",
			"",
			"\tReturns",
			"\t-------",
			"\t$3 : Return Item Description",
			"",
			"\tRaises",
			"\t------",
			"\tValueError",
			"\t\tIf the value of $1 is None",
			"",
			"\t$BLOCK_COMMENT_END",
			"\tif self.$1 != $1:",
			"\t\traise ValueError(\"$1 is not equal to the object's $1 value\")",
			"",
			"\tprint($1)",
			"\treturn $3",
			""
		],
		"description": "Class Function in Python"
	},
	"pyenum": {
		"prefix": "pyenum",
		"body": [
			"from enum import Enum",
			"",
			"class ${1:MyEnum}(Enum):",
			"\t$BLOCK_COMMENT_START",
			"\tEnum Description here",
			"\t$BLOCK_COMMENT_END",
			"\t${2:RED} = \"${3:red}\"",
			"\t${4:GREEN} = \"${5:green}\"",
			"\t${6:BLUE} = \"${7:blue}\"",
			"",
		],
		"description": "Using Enums in Python"
	},
	"pyinum": {
		"prefix": "pyinum",
		"body": [
			"from enum import IntEnum",
			"",
			"class ${1:MyEnum}(IntEnum):",
			"\t$BLOCK_COMMENT_START",
			"\tEnum Description here",
			"\t$BLOCK_COMMENT_END",
			"\t${2:RED} = ${3:0}",
			"\t${4:GREEN} = ${5:1}",
			"\t${6:BLUE} = ${7:2}",
			"",
		],
		"description": "Using Enums in Python"
	},
}